
// MCP2515 Mask and Filter example for standard CAN message frames.
// Written by Cory J. Fowler (20140717)



#include <mcp_can.h>
#include <SPI.h>

long unsigned int rxId;
long unsigned int aPePos;
unsigned char len = 0;
unsigned char rxBuf[8];
String teststring="";

//CAN DATA
long unsigned int steering;



//TESTMODUS WITHOUT KVASER
unsigned char idTest;
unsigned char mesTest[8]={0x13, 0xE8, 0x38, 0x13}; 


//#define CAN0_INT 2                              // Set INT to pin 2
MCP_CAN CAN0(9);                          // Set CS to pin 10



void setup()
{
  Serial.begin(115200);
  if(CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_16MHZ) == CAN_OK) Serial.print("MCP2515 Init Okay!!\r\n");
  else Serial.print("MCP2515 Init Failed!!\r\n");
 // pinMode(2, INPUT);                       // Setting pin 2 for /INT input
  Serial.println("MCP2515 Library Mask & Filter Example...");
  CAN0.setMode(MCP_NORMAL);                // Change to normal mode to allow messages to be transmitted
}

char charToHex(unsigned char c){
    
   if (c<='9')
       return c-'0';
   if (c<='F')
       return c-'A'+10;
   if (c<='f')
       return c-'a'+10;
   return 0;

}

void filter(unsigned char rxBuf[], long unsigned int rxId){
   for(int i=0;i<=sizeof(rxBuf);i++){
       Serial.print("i ist gerade bei =");
       Serial.println(i);
       Serial.print("WERT ist gerade bei =");
       Serial.println(rxBuf[i]);
       Serial.println("----------");
  
 }
 for(int i=0;i<=sizeof(rxBuf);i++){
 teststring=teststring+String(rxBuf[i],HEX);
 }

 Serial.println("*************");
 Serial.print("String selbst lautet");
 Serial.println(teststring);

  if (rxId==516){
    String buffer=teststring.substring(1,4);
    Serial.print("BUFFER  :    ");
    Serial.println(buffer);
    //YASIN,MUSST ERST IN HEX UMWANDELN DANN ERST ZU INT
    unsigned char hexdaten[8]; 
    buffer.toCharArray(hexdaten, 8);
    for(int n=0;n<=(sizeof(buffer)/2);n++){
        hexdaten[n]=charToHex(hexdaten[n]);
  
  }
   Serial.print("TEXT  :    ");
    Serial.println(hexdaten[1]);



    
//    String nea=buffer.toHex();
    steering=buffer.toInt();
    
    Serial.println("$$$$$$$$$$$$$$$$$$$$$$$$");
    Serial.print("Steering Data   :    ");
    Serial.println(steering);

  
  }
}



 





void loop()
{
  
   long unsigned int testmodus=1;
   
   
   if (testmodus==1){
    filter(mesTest,516);
    delay(10000000000000000);
   }
   
   
   
   if(CAN_MSGAVAIL == CAN0.checkReceive())            // check if data coming
    {
      CAN0.readMsgBuf(&rxId, &len, rxBuf); // Read data: len = data length, buf = data byte(s)
      Serial.print("ID: ");
      Serial.print(rxId, HEX);
      Serial.print(" Data: ");
      for(int i = 0; i<len; i++)           // Print each byte of the data
      {
        if(rxBuf[i] < 0x10)                // If data byte is less than 0x10, add a leading zero
        {
          Serial.print("0");
        }
        Serial.print(rxBuf[i], HEX);
        Serial.print(" ");
      }
      filter(rxBuf,rxId);
      Serial.println();
    }





 

  











    
}

/*********************************************************************************************************
END FILE
*********************************************************************************************************/
